generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(cuid())
  email      String   @unique
  name       String
  password   String
  role       UserRole
  phone      String?
  created_at DateTime @default(now())
  join_date  DateTime @default(now())
  updated_at DateTime @updatedAt
  admin      Admin?
  faculty    Faculty?
  student    Student?

  @@map("users")
}

model Admin {
  id            String   @id @default(cuid())
  department    String
  office        String
  permissions   String[]
  user_id       String   @unique
  working_hours String
  user          User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("admins")
}

model Faculty {
  id                  String             @id @default(cuid())
  department          String
  office              String
  specialization      String
  employee_id         String             @unique
  office_hours        String
  user_id             String             @unique
  attendance_records  AttendanceRecord[]
  class_schedules     ClassSchedule[]
  component_approvals ComponentRequest[] @relation("ComponentApprovals")
  project_requests    ProjectRequest[]
  user                User               @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("faculty")
}

model Student {
  id                  String              @id @default(cuid())
  program             String
  year                String
  section             String
  gpa                 Float?
  advisor_id          String?
  student_id          String              @unique
  user_id             String              @unique
  component_requests  ComponentRequest[]
  enrollments         Enrollment[]
  project_requests    ProjectRequest[]
  project_submissions ProjectSubmission[]
  attendance_records  StudentAttendance[]
  user                User                @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("students")
}

model Course {
  id                  String   @id @default(cuid())
  course_name         String
  course_description  String
  course_start_date   DateTime
  course_end_date     DateTime
  course_enrollments  String[] // Array of user IDs
  created_by          String
  created_date        DateTime @default(now())
  modified_by         String?
  modified_date       DateTime @updatedAt
  class_schedules     ClassSchedule[]
  enrollments         Enrollment[]
  course_units        CourseUnit[]

  @@map("courses")
}

model CourseUnit {
  id                String   @id @default(cuid())
  course_id         String
  unit_number       Int
  unit_name         String
  unit_description  String
  assignment_count  Int      @default(0)
  hours_per_unit    Int      @default(1)
  created_by        String
  created_date      DateTime @default(now())
  modified_by       String?
  modified_date     DateTime @updatedAt
  course            Course   @relation(fields: [course_id], references: [id], onDelete: Cascade)

  @@unique([course_id, unit_number])
  @@map("course_units")
}

model Enrollment {
  id          String   @id @default(cuid())
  course_id   String
  enrolled_at DateTime @default(now())
  student_id  String
  grade       String?
  course      Course   @relation(fields: [course_id], references: [id])
  student     Student  @relation(fields: [student_id], references: [id])

  @@unique([student_id, course_id])
  @@map("enrollments")
}

model ClassSchedule {
  id          String  @id @default(cuid())
  room        String
  section     String
  course_id   String
  day_of_week String
  end_time    String
  faculty_id  String
  start_time  String
  course      Course  @relation(fields: [course_id], references: [id])
  faculty     Faculty @relation(fields: [faculty_id], references: [id])

  @@map("class_schedules")
}

model Project {
  id                       String              @id @default(cuid())
  accepted_by              String?
  components_needed        String[]
  course_id                String
  created_by               String
  created_date             DateTime            @default(now())
  description              String
  expected_completion_date DateTime
  modified_by              String?
  modified_date            DateTime            @updatedAt
  name                     String
  status                   ProjectStatus       @default(PENDING)
  type                     ProjectType         @default(FACULTY_ASSIGNED)
  component_requests       ComponentRequest[]
  project_requests         ProjectRequest[]
  submissions              ProjectSubmission[]

  @@map("projects")
}

model ProjectSubmission {
  id              String           @id @default(cuid())
  project_id      String
  student_id      String
  submission_date DateTime         @default(now())
  content         String           // Description or notes
  attachments     String[]         // Array of file URLs/paths
  marks           Int?
  feedback        String?
  status          SubmissionStatus @default(SUBMITTED)
  project         Project          @relation(fields: [project_id], references: [id])
  student         Student          @relation(fields: [student_id], references: [id])

  @@unique([project_id, student_id])
  @@map("project_submissions")
}

model ProjectRequest {
  id            String               @id @default(cuid())
  project_id    String
  student_id    String
  faculty_id    String
  request_date  DateTime             @default(now())
  status        ProjectRequestStatus @default(PENDING)
  student_notes String?
  faculty_notes String?
  accepted_date DateTime?
  rejected_date DateTime?
  faculty       Faculty              @relation(fields: [faculty_id], references: [id])
  project       Project              @relation(fields: [project_id], references: [id])
  student       Student              @relation(fields: [student_id], references: [id])

  @@unique([project_id, student_id])
  @@map("project_requests")
}

model AttendanceRecord {
  id                 String              @id @default(cuid())
  section            String
  date               DateTime
  course_id          String
  created_at         DateTime            @default(now())
  faculty_id         String
  faculty            Faculty             @relation(fields: [faculty_id], references: [id])
  student_attendance StudentAttendance[]

  @@map("attendance_records")
}

model StudentAttendance {
  id                   String           @id @default(cuid())
  status               AttendanceStatus
  attendance_record_id String
  student_id           String
  attendance_record    AttendanceRecord @relation(fields: [attendance_record_id], references: [id])
  student              Student          @relation(fields: [student_id], references: [id])

  @@unique([attendance_record_id, student_id])
  @@map("student_attendance")
}

model LabComponent {
  id                      String             @id @default(uuid())
  component_name          String
  component_description   String
  component_specification String?
  component_quantity      Int
  component_tag_id        String?
  component_category      String
  component_location      String
  image_path              String             @default("lab-images")
  front_image_id          String?
  back_image_id           String?
  invoice_number          String?
  purchase_value          Decimal?           @db.Decimal(10, 2)
  purchased_from          String?
  purchase_currency       String             @default("INR")
  purchase_date           DateTime?
  created_by              String
  modified_by             String?
  created_at              DateTime           @default(now())
  modified_at             DateTime           @updatedAt
  component_requests      ComponentRequest[]

  @@map("lab_components")
}

model ComponentRequest {
  id            String        @id @default(cuid())
  student_id    String
  component_id  String
  quantity      Int
  request_date  DateTime      @default(now())
  return_date   DateTime?
  status        RequestStatus @default(PENDING)
  notes         String?
  approved_by   String?
  approved_date DateTime?
  project_id    String
  purpose       String
  required_date DateTime
  faculty       Faculty?      @relation("ComponentApprovals", fields: [approved_by], references: [id])
  component     LabComponent  @relation(fields: [component_id], references: [id])
  project       Project       @relation(fields: [project_id], references: [id])
  student       Student       @relation(fields: [student_id], references: [id])

  @@map("component_requests")
}

model Location {
  id             String       @id @default(cuid())
  name           String       @unique
  capacity       Int?
  type           LocationType
  contact_email  String?
  contact_person String?
  contact_phone  String?
  created_at     DateTime     @default(now())
  description    String?
  in_charge_id   String?
  is_available   Boolean      @default(true)
  updated_at     DateTime     @updatedAt

  @@map("locations")
}

enum UserRole {
  ADMIN
  FACULTY
  STUDENT
}

enum CourseStatus {
  ACTIVE
  INACTIVE
  ARCHIVED
}

enum ProjectStatus {
  PENDING
  ONGOING
  COMPLETED
  OVERDUE
  REJECTED
}

enum SubmissionStatus {
  SUBMITTED
  GRADED
  REVISION_REQUESTED
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  EXCUSED
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
  COLLECTED
  RETURNED
  PENDING_RETURN
}

enum LocationType {
  LAB
  CLASSROOM
  OFFICE
  WAREHOUSE
  OTHER
}

enum ProjectType {
  FACULTY_ASSIGNED
  STUDENT_PROPOSED
}

enum ProjectRequestStatus {
  PENDING
  APPROVED
  REJECTED
}
