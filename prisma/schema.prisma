// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(cuid())
  email      String   @unique
  name       String
  password   String
  role       UserRole
  phone      String?
  join_date  DateTime @default(now())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Role-specific relations
  admin    Admin?
  faculty  Faculty?
  student  Student?

  @@map("users")
}

model Admin {
  id            String   @id @default(cuid())
  user_id       String   @unique
  department    String
  office        String
  working_hours String
  permissions   String[]

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("admins")
}

model Faculty {
  id              String @id @default(cuid())
  user_id         String @unique
  employee_id     String @unique
  department      String
  office          String
  specialization  String
  office_hours    String

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  // Relations
  courses             Course[]
  class_schedules     ClassSchedule[]
  attendance_records  AttendanceRecord[]
  component_approvals ComponentRequest[] @relation("ComponentApprovals")
  project_requests    ProjectRequest[]

  @@map("faculty")
}

model Student {
  id         String @id @default(cuid())
  user_id    String @unique
  student_id String @unique
  program    String
  year       String
  section    String
  gpa        Float?
  advisor_id String?

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  // Relations
  enrollments         Enrollment[]
  project_submissions ProjectSubmission[]
  attendance_records  StudentAttendance[]
  component_requests  ComponentRequest[]
  project_requests    ProjectRequest[]

  @@map("students")
}

model Course {
  id                String       @id @default(cuid())
  code              String       @unique
  name              String
  description       String
  credits           Int
  department        String
  semester          String
  max_students      Int
  enrolled_students Int          @default(0)
  status            CourseStatus @default(ACTIVE)
  sections          String[]
  faculty_id        String

  faculty Faculty @relation(fields: [faculty_id], references: [id])

  // Relations
  enrollments     Enrollment[]
  class_schedules ClassSchedule[]

  @@map("courses")
}

model Enrollment {
  id          String   @id @default(cuid())
  student_id  String
  course_id   String
  section     String
  enrolled_at DateTime @default(now())

  student Student @relation(fields: [student_id], references: [id])
  course  Course  @relation(fields: [course_id], references: [id])

  @@unique([student_id, course_id])
  @@map("enrollments")
}

model ClassSchedule {
  id          String @id @default(cuid())
  course_id   String
  faculty_id  String
  room        String
  day_of_week String
  start_time  String
  end_time    String
  section     String

  course  Course  @relation(fields: [course_id], references: [id])
  faculty Faculty @relation(fields: [faculty_id], references: [id])

  @@map("class_schedules")
}

model Project {
  id                         String   @id @default(cuid())
  created_by                 String
  modified_by                String?
  created_date               DateTime @default(now())
  modified_date              DateTime @updatedAt
  name                       String
  components_needed          String[] // Array of component IDs
  expected_completion_date   DateTime
  course_id                  String // Course ID
  accepted_by                String? // Faculty ID (only for student-created projects)
  description                String
  status                     ProjectStatus @default(PENDING)
  type                       ProjectType   @default(FACULTY_ASSIGNED) // FACULTY_ASSIGNED or STUDENT_PROPOSED

  // Relations
  submissions       ProjectSubmission[]
  project_requests  ProjectRequest[]
  component_requests ComponentRequest[]

  @@map("projects")
}

model ProjectSubmission {
  id              String   @id @default(cuid())
  project_id      String
  student_id      String
  submission_date DateTime @default(now())
  content         String
  attachments     String[]
  marks           Int?
  feedback        String?
  status          SubmissionStatus @default(SUBMITTED)

  project Project @relation(fields: [project_id], references: [id])
  student Student @relation(fields: [student_id], references: [id])

  @@unique([project_id, student_id])
  @@map("project_submissions")
}

model ProjectRequest {
  id            String               @id @default(cuid())
  project_id    String
  student_id    String
  faculty_id    String
  request_date  DateTime             @default(now())
  status        ProjectRequestStatus @default(PENDING)
  student_notes String?
  faculty_notes String?
  accepted_date DateTime?
  rejected_date DateTime?

  project Project @relation(fields: [project_id], references: [id])
  student Student @relation(fields: [student_id], references: [id])
  faculty Faculty @relation(fields: [faculty_id], references: [id])

  @@unique([project_id, student_id])
  @@map("project_requests")
}

model AttendanceRecord {
  id         String   @id @default(cuid())
  course_id  String
  faculty_id String
  section    String
  date       DateTime
  created_at DateTime @default(now())

  faculty Faculty @relation(fields: [faculty_id], references: [id])

  // Relations
  student_attendance StudentAttendance[]

  @@map("attendance_records")
}

model StudentAttendance {
  id                   String           @id @default(cuid())
  attendance_record_id String
  student_id           String
  status               AttendanceStatus

  attendance_record AttendanceRecord @relation(fields: [attendance_record_id], references: [id])
  student           Student          @relation(fields: [student_id], references: [id])

  @@unique([attendance_record_id, student_id])
  @@map("student_attendance")
}

model LabComponent {
  id                      String   @id @default(uuid())
  component_name          String
  component_description   String
  component_specification String?
  component_quantity      Int
  component_tag_id        String?
  component_category      String
  component_location      String
  image_path              String   @default("lab-images")
  front_image_id          String?
  back_image_id           String?
  invoice_number          String?
  purchase_value          Decimal? @db.Decimal(10, 2)
  purchased_from          String?
  purchase_currency       String   @default("INR")
  purchase_date           DateTime?
  created_by              String
  created_at              DateTime @default(now())
  modified_by             String?
  modified_at             DateTime @updatedAt
  
  component_requests ComponentRequest[]

  @@map("lab_components")
}

model ComponentRequest {
  id             String        @id @default(cuid())
  student_id     String
  component_id   String
  project_id     String
  quantity       Int
  purpose        String
  request_date   DateTime      @default(now())
  required_date  DateTime
  status         RequestStatus @default(PENDING)
  approved_date  DateTime?
  return_date    DateTime?
  notes          String?
  approved_by    String? // Faculty ID

  student   Student      @relation(fields: [student_id], references: [id])
  component LabComponent @relation(fields: [component_id], references: [id])
  project   Project      @relation(fields: [project_id], references: [id])
  faculty   Faculty?     @relation(name: "ComponentApprovals", fields: [approved_by], references: [id])

  @@map("component_requests")
}

model Location {
  id              String       @id @default(cuid())
  name            String       @unique
  description     String?
  type            LocationType
  capacity        Int?
  in_charge_id    String? // Could be a faculty or admin ID
  contact_person  String?
  contact_email   String?
  contact_phone   String?
  is_available    Boolean      @default(true)
  created_at      DateTime     @default(now())
  updated_at      DateTime     @updatedAt

  @@map("locations")
}

// Enums
enum UserRole {
  ADMIN
  FACULTY
  STUDENT
}

enum CourseStatus {
  ACTIVE
  INACTIVE
  ARCHIVED
}

enum ProjectStatus {
  PENDING
  ONGOING
  COMPLETED
  OVERDUE
  REJECTED
}

enum SubmissionStatus {
  SUBMITTED
  GRADED
  REVISION_REQUESTED
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  EXCUSED
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
  COLLECTED
  RETURNED
  PENDING_RETURN
}

enum LocationType {
  LAB
  CLASSROOM
  OFFICE
  WAREHOUSE
  OTHER
}

enum ProjectType {
  FACULTY_ASSIGNED
  STUDENT_PROPOSED
}

enum ProjectRequestStatus {
  PENDING
  APPROVED
  REJECTED
}
